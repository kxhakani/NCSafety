@model NCSafety.Models.Item

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm("Edit", "Items", FormMethod.Post, new { enctype = "multipart/form-data"}))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Item</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div>
            @{ if(Model.imageContent != null && Model.imageMimeType.Contains("image"))
                {
                    string imageBase64 = Convert.ToBase64String(Model.imageContent);
                    string imageSrc = string.Format("data:" + Model.imageMimeType + ";base64,{0}", imageBase64);
                    <img src="@imageSrc" style="max-height:500px; max-width:600px" class="img-responsive img-rounded"  />
                    <br/>
                    <input type="checkbox" id="chkRemoveImage" name="chkRemoveImage"/><strong>Check To Remove Image</strong>
                }
             }
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.imageFileName, htmlAttributes: new { @class = "control-label col-md-2"})
            <div class="col-md-10">
                <label class="">@Model.imageFileName</label>
                <br/>
                Replace With: <input type="file" class="" name="newPicture"/><br/>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HazardID, "HazardID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("HazardID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.HazardID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EquipmentID, "EquipmentID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("EquipmentID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.EquipmentID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InspectionID, "InspectionID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("InspectionID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.InspectionID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.isGood, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.isGood)
                    @Html.ValidationMessageFor(model => model.isGood, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.isFault, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.isFault)
                    @Html.ValidationMessageFor(model => model.isFault, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.itemCorrActionDue, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.itemCorrActionDue, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.itemCorrActionDue, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.itemCorrActionCompleted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.itemCorrActionCompleted, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.itemCorrActionCompleted, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.itemComment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.itemComment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.itemComment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
